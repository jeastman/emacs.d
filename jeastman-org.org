#+TITLE: Org Mode Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+LATEX_CLASS: jmeorgdoc

* What I Use Org For

  Just about everything.

  Anything I write these days is written completely, or at least starts, in
  Org.

  I have recently started keeping day specific notes. Each day is
  represented by an individual Org file, referred to as a ~daypage~. The
  original mechanism I use for handling this is inspired by [[http://tomparslow.co.uk][Thomas
  Parslow's]] article [[http://almostobsolete.net/daypage.html][A day page for Org-Mode]].

* Configuration

  Inspired by the [[https://github.com/eschulte/emacs24-starter-kit][Emacs Starter Kit]], I set up my configuration file using
  Org-babel. My personal move to this literate style of configuration
  programming began with this file. My main configuration file loads this
  automatically by using =(org-babel-load-file "/path/to/file")=.

** General settings

*** Modules

    Org has a number of handy optional modules. The following table lists
    the org modules which I have looked into at some point in time. This
    table serves as a reference for their functionality.

    | Name              | Description                                                        |
    |-------------------+--------------------------------------------------------------------|
    | org-annotate-file | Provides a means to annotate arbitraty files in a central location |
    | org-bbdb          | Allows linking to BBDB entries from within org                     |
    | org-bibtex        | Allows links to database entries in BibTeX files                   |
    | org-eshell        | Allows linking to an eshell and executing a command                |
    | org-eww           | Allows creating a link to URL of an eww buffer                     |
    | org-feed          | Allows entries to be created and changed by items in an RSS feed   |
    | org-git-link      | Allows linking to files in git repository                          |
    | org-panel         | A kind of control panel for org - facilitates quick navigation     |

    The default set of modules (as of 24.4) are:

    - org-w3m
    - org-bbdb
    - org-bibtex
    - org-docview
    - org-gnus
    - org-info
    - org-irc
    - org-mhe
    - org-rmail

    The following list are the set of modules that I am currently
    experimenting with.

    #+BEGIN_SRC emacs-lisp
      (setq org-modules '(org-annotate-file
                          org-bibtex
                          org-eww
                          org-list))
    #+END_SRC

*** Org Files

    I use a number of files to break up tasks into resonably grouped files.

    =work.org= - Work-specific items.
    =tasks.org= - General tasks.
    =home.org= - Home-specific items.
    =notes.org= - General notes file.

    Daypages have their own directory and the files are generated
    on-demand.

    #+BEGIN_SRC emacs-lisp
      (setq daypage-path (concat org-directory "/days/"))
      (setq diary-file (concat org-directory "/diary"))
      (setq org-mobile-inbox-for-pull (concat org-directory "/flagged.org"))
      (setq org-agenda-files (list (concat org-directory "/work.org")
                                   (concat org-directory "/tasks.org")
                                   (concat org-directory "/journal.org")
                                   (concat org-directory "/notes.org")
                                   (concat org-directory "/calendar.org")
                                   (expand-file-name daypage-path)))
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq org-annotate-file-storage-file (concat org-directory "/annotated.org"))
      (setq org-agenda-include-diary nil)
    #+END_SRC

** Daypages

   The following functions are used for opening daypage buffers. This can
   be used to create day-specific items.

   #+BEGIN_SRC emacs-lisp
     (defun jme:find-daypage (&optional date)
       "Go to the page for the specified date. If no date is specified, go to today's page."
       (interactive (list
                     (org-read-date "" 'totime nil nil (current-time) "")))
       (setq date (or date (current-time)))
       (find-file
        (expand-file-name
         (concat daypage-path
                 (format-time-string "%Y%m%d" date) ".org")))
       (when (eq 0 (buffer-size))
         ; Insert a skeleton into the file
         (jme:insert-yas-by-name "daily")
         (beginning-of-buffer)
         (next-line 2)))

     (defun jme:todays-daypage ()
       "Go straight to today's day page."
       (interactive)
       (jme:find-daypage))
   #+END_SRC

** Babel

   Ensure we have support for programming languages used in code blocks.

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (ditaa . t)
        (dot . t)
        (gnuplot . t)
        (plantuml . t)
        (python . t)
        (js . t)
        (lisp . t)
        (shell . t)))
   #+END_SRC

** Look and Feel

   Use utf-8 bullets for nicer look.

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :after org
       :ensure t
       :demand t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

   =org-sticky-header= shows off-screen Org heading at top of window.

   #+BEGIN_SRC emacs-lisp
     (use-package org-sticky-header
       :after org
       :ensure t
       :demand t
       :config
       (setq org-sticky-header-full-path 'full)
       (add-hook 'org-mode-hook 'org-sticky-header-mode))
   #+END_SRC

   Startup with content not folded.

   #+BEGIN_SRC emacs-lisp
     (setq org-startup-folded nil)
   #+END_SRC

   The following ensures that I do not accidentally make edits to invisible
   areas. A value of ~show~ causes the point to become visible and actually
   do the requested edit.

   #+BEGIN_SRC emacs-lisp
     (setq org-catch-invisible-edits 'smart)
   #+END_SRC

*** Code block fontification

    The following displays the contents of code blocks using the major-mode
    of the code.  It also changes the behavior of ~TAB~ to work as
    appropriate for the major-mode.  This allows for reading and writing
    code inside of Org to be closer to the experience in the major-mode
    itself.

    #+BEGIN_SRC emacs-lisp
      (setq
       org-src-fontify-natively t
       org-src-tab-acts-natively t)
    #+END_SRC

*** Targets

    Targets include this file and any file contributing to the agenda - up
    to 5 levels deep.

    #+BEGIN_SRC emacs-lisp
      (setq org-refile-targets '((org-agenda-files . (:maxlevel . 5))))
    #+END_SRC

    Targets start with the file name. This allows creating level 1 tasks.

    #+BEGIN_SRC emacs-lisp
      (setq org-refile-use-outline-path 'file)
    #+END_SRC

    Targets complete in steps so we start with filename, TAB shows the next
    level of targets etc.

    #+BEGIN_SRC emacs-lisp
      (setq org-outline-path-complete-in-steps t)
    #+END_SRC

    Allow refile to create parent tasks with confirmation.

    #+BEGIN_SRC emacs-lisp
      (setq org-refile-allow-creating-parent-nodes 'confirm)
    #+END_SRC


** Task settings

*** Timestamps

    Add a timestamp to the task when it moves to the DONE state.

    #+BEGIN_SRC emacs-lisp
      (setq org-log-done 'time
            org-log-into-drawer "LOGBOOK")
    #+END_SRC

*** Workflows

    Personal todo items are tracked with TODO, other tracked items are
    labeled with TASK. Inspired by [[http://juanreyero.com/article/emacs/org-teams.html][Org-mode tricks for team management]].

    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO(t)" "STARTED(s!)" "WAITING(w@/!)" "STALLED(x@/!)" "|" "DONE(d!)" "CANCELLED(c@)")
              (sequence "TASK(f)" "|" "DONE(d!)")
              (sequence "MAYBE(m)" "|" "DONE(d!)" "CANCELLED(c@)")
              (sequence "RISK(r)" "|" "MITIGATED(i@)")))
    #+END_SRC

    Add some color to the different items to make them easier to visualize.

    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keyword-faces
            '(("TODO" . (:foreground "DarkOrange" :weight bold))
              ("STARTED" . (:foreground "DarkOrange" :weight bold))
              ("WAITING" . (:foreground "gold" :weight bold))
              ("MAYBE" . (:foreground "spring green"))
              ("DONE" . (:foreground "dark sea green"))
              ("STALLED" . (:foreground "slate grey"))
              ("CANCELLED" . (:foreground "slate grey"))
              ("TASK" . (:foreground "DeepSkyBlue"))
              ("RISK" . (:foreground "white" :background "orange red"))
              ("MITIGATED" . (:foreground "white" :background "dark green"))))
    #+END_SRC

**** Projects

     Collections of tasks and other items are projects, and are marked with
     the =prj= tag. They should contain todo items and are considered stuck
     unless they do. The =prj= tag should not be inheritable, otherwise its
     tasks will also appear as projects.

     #+BEGIN_SRC emacs-lisp
       (setq org-tags-exclude-from-inheritance '("prj"))
     #+END_SRC

*** Templates

    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline "tasks.org" "Tasks")
               "* TODO %^{Brief Description} %^g\n  %?\n  Added: %U")
              ("T" "Quick task" entry (file+headline "tasks.org" "Tasks")
               "* TASK %^{Task}"
               :immediate-finish t)
              ("j" "Journal entry" plain (file+datetree "journal.org")
               "%K - %a\n%i\n%?\n"
               :unnarrowed t)
              ("J" "Journal entry with date" plain (file+datetree+prompt "journal.org")
               "%K - %a\n%i\n%?\n"
               :unnarrowed t)
              ("n" "Notes" entry (file+datetree "notes.org" "Inbox")
               "* %^{Description} %^g\n  %?\n  Added: %U")))
    #+END_SRC

*** Archiving

    Archiving of completed tasks. see
    http://article.gmane.org/gmane.emacs.orgmode/3629.

    Alternative implementations:
    - [[https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command][How to archive all the DONE tasks using a single command]]

    To set an org file up for archiving you need to add the following at
    the top of the file (replace archive.text with the archive file):

    =-*- mode: org; after-save-hook: (archive-done-tasks) -*-=
    =#+ARCHIVE: archive.txt::* %s archive=

    #+BEGIN_SRC emacs-lisp
      (defvar jme:org-archive-expiry-days 7
        "The number of days after which a completed task should be auto-archived.
          This can be 0 for immediate, or a floating point value.")

      (defun jme:archive-p (p)
        "Determine if the headline at point P needs to be archived."
        (let* ((props (org-entry-properties p))
               (closed (assoc "CLOSED" props)))
          (if closed
              (let ((when-closed (org-parse-time-string (cdr closed))))
                (if (>= (time-to-number-of-days (time-subtract (current-time)
                                                               (apply #'encode-time when-closed)))
                        jme:org-archive-expiry-days)
                    t)))))

      (defun jme:does-item-need-archive? ()
        "Does item at point need to be archived?"
        (interactive)
        (if (jme:archive-p (point))
            (message "Yes")
          (message "No")))

      (defun jme:org-archive-done-tasks ()
        (interactive)
        (save-excursion
          (goto-char (point-min))
          (let ((done-regexp
                 (concat "\\* \\(" (regexp-opt org-done-keywords) "\\) "))
                (state-regexp
                 (concat "- State \"\\(" (regexp-opt org-done-keywords)
                         "\\)\"\\s-*\\[\\([^]\n]+\\)\\]")))
            (while (re-search-forward done-regexp nil t)
              (let ((end (save-excursion
                           (outline-next-heading)
                           (point)))
                    begin)
                (goto-char (line-beginning-position))
                (setq begin (point))
                (if (jme:archive-p begin)
                  (org-archive-subtree)
                 (goto-char end)))))
          (save-buffer)))

          (setq safe-local-variable-values (quote ((after-save-hook archive-done-tasks))))
          (defalias 'archive-done-tasks 'jme:org-archive-done-tasks)
    #+END_SRC

** Agenda Settings

   Look ahead two days of my agenda at a time.

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 2)
   #+END_SRC

   A common problem with all-day and multi-day events in org agenda view is
   that they become separated from timed events and are placed below all
   =TODO= items. Likewise, additional fields such as =Location:= are
   orphaned from their parent events. The following hook will ensure that
   all events are correctly placed in the agenda:

   See http://orgmode.org/worg/org-contrib/org-mac-iCal.html

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-agenda-cleanup-fancy-diary-hook
               (lambda ()
                 (goto-char (point-min))
                 (save-excursion
                   (while (re-search-forward "^[a-z]" nil t)
                     (goto-char (match-beginning 0))
                     (insert "0:00-24:00")))
                 (while (re-search-forward "^ [a-z]" nil t)
                   (goto-char (match-beginning 0))
                   (save-excursion
                     (re-search-backward "^[0-9]+:[0-9]+-[0-9]+:[0-9]+ " nil t))
                   (insert (match-string 0)))))
   #+END_SRC

*** Allow quickly marking items as done in the agenda view. (From [[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-82][here]]).

    #+BEGIN_SRC emacs-lisp
      (defun jme:org-agenda-done (&optional arg)
        "Mark current TODO as done.
      This changes the line at point, all other lines in the agenda referring to
      the same tree node, and the headline of the tree node in the org file."
        (interactive "P")
        (org-agenda-todo "DONE"))
      ;(bind-key "x" 'jme:org-agenda-done org-agenda-mode-map)

      (defun jme:org-agenda-done-and-add-followup ()
        "Mark the current TODO as done and add another task after it.
      Creates it at the same level as the previous task."
        (interactive)
        (org-agenda-todo "DONE")
        (org-agenda-switch-to)
        (org-capture 0 "t"))
      ;(bind-key "X" 'jme:org-agenda-done-and-add-followup org-agenda-mode-map)
    #+END_SRC

** LaTeX

   Use smart quotes when exporting.

   #+BEGIN_SRC emacs-lisp
     (setq org-export-with-smart-quotes t)
   #+END_SRC

*** Source code listings

    Use the ~minted~ package for source code fontification and coloring.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-latex-packages-alist '("" "minted"))
      (setq org-latex-listings 'minted)
      (setq org-latex-minted-options
         '(("frame" "lines")
           ("fontsize" "\\scriptsize")))
    #+END_SRC

    We need to also ensure that the PDF conversion process adds the
    =-shell-escape= option to pdflatex.

    #+BEGIN_SRC emacs-lisp
      (setq org-latex-pdf-process
         '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    #+END_SRC

    Add custom document classes.

    #+BEGIN_SRC emacs-lisp
      (require 'ox-latex)
      (add-to-list 'org-latex-classes
            '("mezeoorgdoc" "\\documentclass[10pt,oneside]{mezeoorgdoc}"
              ("\\chapter{%s}" . "\\chapter*{%s}")
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagrah*{%s}")))
      (add-to-list 'org-latex-classes
            '("jmeorgdoc" "\\documentclass[10pt,oneside]{jmeorgdoc}"
              ("\\chapter{%s}" . "\\chapter*{%s}")
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagrah*{%s}")))
      (add-to-list 'org-latex-classes
            '("jmeorgarticle" "\\documentclass[10pt,oneside,article]{jmeorgdoc}"
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagrah*{%s}")))
      (add-to-list 'org-latex-classes
             '("synacororgarticle" "\\documentclass[10pt,oneside,article]{synacororgarticle}"
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagrah*{%s}")))
    #+END_SRC

** Key bindings

   #+BEGIN_SRC emacs-lisp
     (bind-key "C-c l" 'org-store-link)
     (bind-key "C-c L" 'org-insert-link-global)
     (bind-key "C-c a" 'org-agenda)
     (bind-key "C-c c" 'org-capture)
     (bind-key "C-c b" 'org-iswitchb)
   #+END_SRC
