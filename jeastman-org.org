#+TITLE: Org Mode Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+LATEX_CLASS: jmeorgdoc

* What I Use Org For

Just about everything.

Anything I write these days is written completely, or at least starts, in
Org. 

I have recently started keeping day specific notes. Each day is represented
by an individual Org file, referred to as a ~daypage~. The original
mechanism I use for handling this is inspired by [[http://tomparslow.co.uk][Thomas Parslow's]] article [[http://almostobsolete.net/daypage.html][A
day page for Org-Mode]].

* Configuration
Inspired by the [[https://github.com/eschulte/emacs24-starter-kit][Emacs Starter Kit]], I set up my configuration file
using Org-babel. My personal move to this literate style of configuration
programming began with this file. My main configuration file loads this
automatically by using =(org-babel-load-file "/path/to/file")=.

** General settings

*** Modules
Org has a number of handy optional modules. The following list are the set
of modules that I am currently experimenting with.

#+BEGIN_SRC emacs-lisp
  (setq org-modules '(org-annotate-file
                      org-bbdb
                      org-bibtex
                      org-docview
                      org-list
                      org-info
                      org-jsinfo
                      org-man
                      org-panel
                      org-w3m))
#+END_SRC

*** Org Files

    I use a number of files to break up tasks into resonably grouped files.

    =work.org= - Work-specific items.
    =tasks.org= - General tasks.
    =home.org= - Home-specific items.
    =notes.org= - General notes file.

    Daypages have their own directory and the files are generated
    on-demand. 

#+BEGIN_SRC emacs-lisp
  (setq daypage-path (concat org-directory "/days/"))
  (setq diary-file (concat org-directory "/diary"))
  (setq org-mobile-inbox-for-pull (concat org-directory "/flagged.org"))
  (setq org-agenda-files (list (concat org-directory "/work.org")
                               (concat org-directory "/tasks.org")
                               (concat org-directory "/home.org")
                               (concat org-directory "/workcal.org")
                               (concat org-directory "/homecal.org")
                               (concat org-directory "/notes.org")
                               (expand-file-name daypage-path)))
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-annotate-file-storage-file (concat org-directory "/annotated.org"))
#+END_SRC

** Daypages

 The following functions are used for opening daypage buffers. This can be
 used to create day-specific items.

#+BEGIN_SRC emacs-lisp
(defun jme/find-daypage (&optional date)
  "Go to the page for the specified date. If no date is specified, go to today's page."
  (interactive (list
                (org-read-date "" 'totime nil nil (current-time) "")))
  (setq date (or date (current-time)))
  (find-file
   (expand-file-name
    (concat daypage-path
            (format-time-string "%Y%m%d" date) ".org")))
  (when (eq 0 (buffer-size))
    ; Insert a skeleton into the file
    (jme/insert-yas-by-name "daily")
;    (insert (concat "* <"
;                    (format-time-string "%Y-%m-%d %a" date)
;                    "> Notes\n\n"))
    (beginning-of-buffer)
    (next-line 2)))

(defun jme/todays-daypage ()
  "Go straight to today's day page."
  (interactive)
  (jme/find-daypage))
#+END_SRC

** Babel

Ensure we have support for programming languages used in code blocks.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ditaa . t)
     (dot . t)
     (gnuplot . t)
     (plantuml . t)
     (python . t)
     (js . t)
     (lisp . t)))
#+END_SRC

** Look and Feel

Use utf-8 bullets for nicer look.

#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

Startup with content folded.

#+BEGIN_SRC emacs-lisp
(setq org-startup-folded 'content)
#+END_SRC

Use =ido=-style completion.

#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
#+END_SRC

The following ensures that I do not accidentally make edits to invisible
areas. A value of ~show~ causes the point to become visible and actually do
the requested edit.

#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'show)
#+END_SRC

*** Code block fontification

The following displays the contents of code blocks using the major-mode of
the code.  It also changes the behavior of ~TAB~ to work as appropriate for
the major-mode.  This allows for reading and writing code inside of Org to
be closer to the experience in the major-mode itself.

#+BEGIN_SRC emacs-lisp
(setq
 org-src-fontify-natively t
 org-src-tab-acts-natively t)
#+END_SRC

*** Targets

Targets include this file and any file contributing to the agenda - up to
5 levels deep.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))
#+END_SRC

Targets start with the file name. This allows creating level 1 tasks.

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path (quote file))
#+END_SRC

Targets complete in steps so we start with filename, TAB shows the next
level of targets etc.

#+BEGIN_SRC emacs-lisp
(setq org-outline-path-complete-in-steps t)
#+END_SRC

Allow refile to create parent tasks with confirmation.

#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

** Task settings

*** Timestamps
Add a timestamp to the task when it moves to the DONE state.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

*** Effort

#+BEGIN_SRC emacs-lisp
(setq org-global-properties
      '(("Effort_ALL". "0 0:15 0:30 1:00 2:00 3:00 4:00")))
#+END_SRC

*** Workflows

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "PROJECT(p)" "|" "FINISHED(f)")
        (sequence "TODO(t)" "|" "NOTE(n)" "DONE(d)")
        (sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+END_SRC

*** Templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("m" "Mezeo Task" entry (file+headline
                                  (concat org-directory "/work.org") "General")
         "* TODO %^{Brief Description} %^g\n  %?\n  Added: %U")
        ("t" "Todo" entry (file+headline
                           (concat org-directory "/tasks.org") "Tasks")
         "* TODO %^{Brief Description} %^g\n  %?\n  Added: %U")
        ("n" "Notes" entry (file+datetree
                              (concat org-directory "/notes.org") "Inbox")
         "* %^{Description} %^g\n  %?\n  Added: %U")))
#+END_SRC

*** Archiving
Archiving of completed tasks. see
http://article.gmane.org/gmane.emacs.orgmode/3629.

To set an org file up for archiving you need to add the following at the
top of the file (replace archive.text with the archive file):

=-*- mode: org; after-save-hook: (archive-done-tasks) -*-=
=#+ARCHIVE: archive.txt::* %s archive=

#+BEGIN_SRC emacs-lisp
(defvar jme/org-archive-expiry-days 7
  "The number of days after which a completed task should be auto-archived.
This can be 0 for immediate, or a floating point value.")

(defun jme/org-archive-done-tasks ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((done-regexp
           (concat "\\* \\(" (regexp-opt org-done-keywords) "\\) "))
          (state-regexp
           (concat "- State \"\\(" (regexp-opt org-done-keywords)
                   "\\)\"\\s-*\\[\\([^]\n]+\\)\\]")))
      (while (re-search-forward done-regexp nil t)
        (let ((end (save-excursion
                     (outline-next-heading)
                     (point)))
              begin)
          (goto-char (line-beginning-position))
          (setq begin (point))
          (if (re-search-forward state-regexp end t)
              (let* ((time-string (match-string 2))
                     (when-closed (org-parse-time-string time-string)))
                (if (>= (time-to-number-of-days
                         (time-subtract (current-time)
                                        (apply #'encode-time when-closed)))
                        jme/org-archive-expiry-days)
                    (org-archive-subtree)))
            (goto-char end)))))
    (save-buffer)))

(setq safe-local-variable-values (quote ((after-save-hook archive-done-tasks))))
(defalias 'archive-done-tasks 'jme/org-archive-done-tasks)
#+END_SRC

** Agenda Settings

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ("P" "Projects"
           ((tags "PROJECT")))
          ("H" "Office and Home Lists"
           ((agenda)
            (tags-todo "OFFICE")
            (tags-todo "HOME")
            (tags-todo "COMPUTER")
            (tags-todo "PHONE")))
          ("D" "Daily Action List"
           (
            (agenda "" ((org-agenda-ndays 1)
                        (org-agenda-sorting-strategy
                         (quote ((agenda time-up priority-down tag-up) )))
                        (org-deadline-warning-days 0)
                        ))
            ))
          ))
#+END_SRC

A common problem with all-day and multi-day events in org agenda view is
that they become separated from timed events and are placed below all =TODO=
items. Likewise, additional fields such as =Location:= are orphaned from
their parent events. The following hook will ensure that all events are
correctly placed in the agenda:

See http://orgmode.org/worg/org-contrib/org-mac-iCal.html

#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-cleanup-fancy-diary-hook
          (lambda ()
            (goto-char (point-min))
            (save-excursion
              (while (re-search-forward "^[a-z]" nil t)
                (goto-char (match-beginning 0))
                (insert "0:00-24:00")))
            (while (re-search-forward "^ [a-z]" nil t)
              (goto-char (match-beginning 0))
              (save-excursion
                (re-search-backward "^[0-9]+:[0-9]+-[0-9]+:[0-9]+ " nil t))
              (insert (match-string 0)))))
#+END_SRC

** LaTeX

Use smart quotes when exporting.

#+BEGIN_SRC emacs-lisp
(setq org-export-with-smart-quotes t)
#+END_SRC

*** Source code listings

Use the ~minted~ package for source code fontification and coloring.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
   '(("frame" "lines")
     ("fontsize" "\\scriptsize")))
#+END_SRC

We need to also ensure that the PDF conversion process adds the
=-shell-escape= option to pdflatex.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Add custom document classes.

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-classes
      '("mezeoorgdoc" "\\documentclass[10pt,oneside]{mezeoorgdoc}"
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagrah*{%s}")))
(add-to-list 'org-latex-classes
      '("jmeorgdoc" "\\documentclass[10pt,oneside]{jmeorgdoc}"
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagrah*{%s}")))
(add-to-list 'org-latex-classes
      '("jmeorgarticle" "\\documentclass[10pt,oneside,article]{jmeorgdoc}"
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagrah*{%s}")))
#+END_SRC

** Key bindings

Guide setup

#+BEGIN_SRC emacs-lisp
  (defun guide-key/jme-hook-function-for-org-mode ()
    (guide-key/add-local-guide-key-sequence "C-c")
    (guide-key/add-local-guide-key-sequence "C-c C-x")
    (guide-key/add-local-highlight-command-regexp "org-"))
  (add-hook 'org-mode-hook 'guide-key/jme-hook-function-for-org-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c l" 'org-store-link)
  (bind-key "C-c L" 'org-insert-link-global)
  (bind-key "C-c a" 'org-agenda)
  (bind-key "C-c c" 'org-capture)
  (bind-key "C-c b" 'org-iswitchb)
  (eval-after-load 'org
    '(progn
       (bind-key "C-c p" 'orgpan-panel org-mode-map)))
#+END_SRC
