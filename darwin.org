#+TITLE: Darwin (Mac OS X) Specific Settings
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything

* Overview

  This file contains configuration items specific to the Mac.

  #+BEGIN_SRC emacs-lisp :padline no
    ;;; darwin.el -- Automatically generated darwin configuration
    ;;;
    ;;; This file is generated by tangling darwin.org.
    ;;; DO NOT EDIT
    ;;;
    ;;; Commentary:
    ;;;
    ;;; See darwin.org for complete documentation
    ;;;
    ;;; Code:
    ;;;
  #+END_SRC

* Applications
** aspell

   Use =aspell= instead of =ispell=.

   #+BEGIN_SRC emacs-lisp
     (setq-default ispell-program-name "/usr/local/bin/aspell")
   #+END_SRC

** Calendar

   #+BEGIN_SRC emacs-lisp
     (use-package org-mac-iCal)
   #+END_SRC

** markown

   Use =mmd= (MultiMarkdown) instead of =md= (Markdown).

   #+BEGIN_SRC emacs-lisp
     (setq markdown-command "/usr/local/bin/mmd")
   #+END_SRC

** Node

   Make sure node path is set up.

   #+BEGIN_SRC emacs-lisp
     (setenv "NODE_PATH" "/usr/local/lib/node_modules")
   #+END_SRC

* Special Configuration

  Prevent finder from opening new frames.

  #+BEGIN_SRC emacs-lisp
    (setq ns-pop-up-frames 'nil)
  #+END_SRC

  Take advantage of the trash can on the Mac.

  #+BEGIN_SRC emacs-lisp
    (if (boundp 'mac-system-move-file-to-trash-use-finder)
        (setq mac-system-move-file-to-trash-use-finder t)
      (setq delete-by-moving-to-trash t
            trash-directory "~/.Trash/emacs"))
  #+END_SRC

  Include spotlight data into helm.

  #+BEGIN_SRC emacs-lisp
    (setq jme/helm-sources '(helm-source-buffers-list
                             helm-source-recentf
                             helm-source-bookmarks
                             helm-source-file-cache
                             helm-source-files-in-current-dir
                             helm-source-mac-spotlight))
  #+END_SRC

* Tweaks

** Super key support

   I utilize the command key as META on Mac, thus need something else to
   use as SUPER key. This enables the OPTION key as SUPER, while preserving
   it as ALT in other cases.

   #+BEGIN_SRC emacs-lisp
   (setq mac-option-modifier '(:ordinary super :function alt :mouse alt))
   #+END_SRC

** Emoji

   Use the Mac emoji font.

   #+BEGIN_SRC emacs-lisp
   (when (fboundp 'set-fontset-font)
     (set-fontset-font "fontset-default"
                       '(#x1F600 . #x1F64F)
                       (font-spec :name "Apple Color Emoji") nil 'prepend))
   #+END_SRC

** Flyspell

   Flyspell depends on =mouse-3= which does not work well without a 3rd
   button. Fix that.

   #+BEGIN_SRC emacs-lisp
     (eval-after-load "flyspell"
       '(progn
          (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
          (define-key flyspell-mouse-map [moude-3] #'undefined)))
   #+END_SRC

* Notification Messages

  This function posts messages to the Mac Notification Center. Provides a
  Mac specific way to display desktop notifications via simple AppleScript.

  #+BEGIN_SRC emacs-lisp
    (cl-defun jme/message-notify (title text &key speak-it (max-text-len 64))
      "Post a message with the given TITLE and TEXT to the notifications center.
      If SPEAK-IT is not NIL, will also say the message. Any text over MAX-TEXT-LEN
      will be truncated.

      If the ~deferred~ package is available, the notification is processed
      asynchronously.

      This is a Mac OS X specific function.  Note that double-quotes that occur in
      the TITLE and the TEXT are replaced with single quotes."

      (let ((title (replace-regexp-in-string "\"" "'" title))
            (text (replace-regexp-in-string "\"" "'" (if (> (length text) max-text-len)
                                                         (substring text 0 max-text-len)
                                                       text)))
            (fn (lambda (title text speak-it) (do-applescript (concat
                                                               "display notification \""
                                                               text
                                                               "\" with title \""
                                                               title
                                                               (if speak-it "\"" "\" sound name \"Pop\"")))
                  (when speak-it
                    (do-applescript (concat
                                     "say \""
                                     text
                                     "\" using \""
                                     "Tessa"
                                     "\" without waiting until completion"))))))
        (if (require 'deferred nil 'noerror)
              (deferred:call fn title text speak-it)
          (funcall fn title text speak-it))))
  #+END_SRC
